generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator kysely {
  provider = "prisma-kysely"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username      String?   @unique
  name          String?
  email         String    @unique
  registered    DateTime?
  location      String?
  verified      Boolean   @default(false)
  emailVerified DateTime?
  birthday      DateTime?
  followedBy    User[]    @relation("UserFollow")
  following     User[]    @relation("UserFollow")
  image         String?
  accounts      Account[]
  sessions      Session[]
  bio           String?
  posts         Post[]
  likes         Post[]    @relation("Like")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  content   String
  parentId  String?  @db.Uuid
  parent    Post?    @relation("PostHierarchy", fields: [parentId], references: [id])
  children  Post[]   @relation("PostHierarchy")
  likes     User[]   @relation("Like")
  media     String[]
}
